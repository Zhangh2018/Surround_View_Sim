<?xml version="1.0" ?>
<sdf version="1.5">
  <model name="wideanglecamera">
    <static>1</static>
    <pose>0 0 0.05 0 0 0</pose>
    <link name="link">
      <inertial>
        <mass>0.1</mass>
      </inertial>
      <collision name="collision">
        <geometry>
          <box>
            <size>0.04 0.04 0.04</size>
          </box>
        </geometry>
      </collision>
      <visual name="visual">
        <geometry>
          <box>
            <size>0.04 0.04 0.04</size>
          </box>
        </geometry>
	  </visual>
	<!-- You should be already familiar with sdf definition of the `camera` sensor, the only difference is that you change it's `type` to `wideanglecamera` -->
	<sensor name="camera" type="wideanglecamera">
	  <camera>
		<horizontal_fov>3.1416</horizontal_fov>
		<image>
		  <width>1280</width>
		  <height>720</height>
		</image>
		<clip>
		  <near>0.1</near>
		  <far>100</far>
		</clip>
    <save enabled="true">
      <path>/home/changkun/Desktop/Calibrate_extrinsic</path>
    </save>

		 <!-- A new section named `lens`. -->
		<lens>
		  <!-- type element is mandatory -->
		  <type>custom</type>

		  <!-- manually defined mapping function r = c1*f*fun(theta/c2 + c3) -->
		  <!-- More information here: https://en.wikipedia.org/wiki/Fisheye_lens#Mapping_function -->
		  <custom_function>
		    <c1>2</c1>   <!-- linear scaling -->
		    <c2>2</c2>      <!-- angle scaling -->
		    <f>1</f>      <!-- one more scaling parameter -->
		    <fun>id</fun>  <!-- one of sin,tan,id -->
		  </custom_function>

		  <!-- if it is set to `true` your horizontal FOV will ramain as defined -->
		  <!-- othervise it depends on lens type and custom function, if there is one -->
		  <scale_to_hfov>true</scale_to_hfov>
		  <!-- clip everything that is outside of this angle -->
		  <cutoff_angle>1.508</cutoff_angle>
		  <!-- resolution of the cubemap texture, the highter it is - the sharper is your image -->
		  <env_texture_size>1280</env_texture_size>
		</lens>
	  <always_on>1</always_on>
	  <update_rate>2</update_rate>
	  </camera>
		
		<plugin name="camera_controller" filename="libgazebo_ros_camera.so">
    <cameraName>camera1</cameraName>
    <imageTopicName>image_raw</imageTopicName>
    <cameraInfoTopicName>camera_info</cameraInfoTopicName>
    <frameName>camera_link</frameName>
    <hackBaseline>0.07</hackBaseline>
  </plugin>
	</sensor>
	</link>
  </model>
</sdf>
