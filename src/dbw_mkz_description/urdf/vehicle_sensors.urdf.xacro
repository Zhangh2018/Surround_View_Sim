<?xml version="1.0"?>

<robot name="mkz_sensors" xmlns:xacro="http://www.ros.org/wiki/xacro" >

  <xacro:macro name="dbw_mkz_camera" params="name parent_link x y z roll pitch yaw" >

    <link name="${name}" >
      <visual>
        <geometry>
          <box size="0.1 0.1 0.1" />
        </geometry> 
        <material name="white">
          <color rgba="1 1 1 1" />
        </material>
      </visual>
    </link>

    <link name="${name}_optical" />

    <joint name="${name}_optical" type="fixed" >
      <parent link="${name}_optical" />
      <child link="${name}" />
      <origin xyz="0 0 0" rpy="-1.57079632679 0 -1.57079632679" />
    </joint>

    <joint name="${name}_joint" type="fixed" >
      <parent link="${parent_link}" />
      <child link="${name}_optical" />
      <origin xyz="${x} ${y} ${z}" rpy="${roll} ${pitch} ${yaw}" />
    </joint>

    <gazebo reference="${name}_optical" >
      <material>Gazebo/White</material>

      <sensor type="camera" name="${name}_camera">
        <update_rate>30.0</update_rate>

        <camera name="cam">
          <horizontal_fov>1.3962634</horizontal_fov>
          <image>
            <width>800</width>
            <height>800</height>
            <format>R8G8B8</format>
          </image>
          <clip>
            <near>0.02</near>
            <far>300</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <!-- Noise is sampled independently per pixel on each frame.
                 That pixel's noise value is added to each of its color
                 channels, which at that point lie in the range [0,1]. -->
            <mean>0.0</mean>
            <stddev>0.007</stddev>
          </noise>
        </camera>

        <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
          <robotNamespace>/sensor</robotNamespace>
          <alwaysOn>true</alwaysOn>
          <updateRate>0.0</updateRate>
          <cameraName>${name}</cameraName>
          <imageTopicName>image_raw</imageTopicName>
          <cameraInfoTopicName>camera_info</cameraInfoTopicName>
          <frameName>${name}</frameName>
          <hackBaseline>0.0</hackBaseline>
          <distortionK1>0.0</distortionK1>
          <distortionK2>0.0</distortionK2>
          <distortionK3>0.0</distortionK3>
          <distortionT1>0.0</distortionT1>
          <distortionT2>0.0</distortionT2>
        </plugin>
      </sensor>
    </gazebo>
  </xacro:macro>

  <xacro:macro name="dbw_mkz_gps" params="name parent_link x y z rate ref_lat ref_lon" >
    <link name="${name}" >
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <cylinder radius="0.1" length="0.05" />
        </geometry>
        <material name="white" >
          <color rgba="1 1 1 1" />
        </material>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <cylinder radius="0.1" length="0.05" />
        </geometry>
      </collision>
      <inertial>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <mass value="1.0"/>
        <inertia ixx="0.037227" ixy="0" ixz="0" iyy="0.037227" iyz="0" izz="0.063878"/>
      </inertial>
    </link>
    <joint name="${name}" type="fixed" >
      <origin xyz="${x} ${y} ${z}" rpy="0 0 0" />
      <parent link="${parent_link}" />
      <child link="${name}" />
    </joint>
    <gazebo>
      <plugin name="gps_plugin" filename="libdbw_mkz_gazebo_gps.so" >
        <link_name>${name}</link_name>
        <update_rate>${rate}</update_rate>
        <ref_lat>${ref_lat}</ref_lat>
        <ref_lon>${ref_lon}</ref_lon>
        <ant_offset_x>${x}</ant_offset_x>
        <ant_offset_y>${y}</ant_offset_y>
        <ant_offset_z>${z}</ant_offset_z>
      </plugin>
    </gazebo>
  </xacro:macro>
  
  <xacro:macro name="momenta_surround_cam" params="name parent_link x y z roll pitch yaw" >
    <link name="${name}" >
      <visual>
        <geometry>
          <box size="0.04 0.04 0.04" />
        </geometry> 
        <material name="white">
          <color rgba="1 1 1 1" />
        </material>
      </visual>
    </link>

    <link name="${name}_optical" />

    <joint name="${name}_optical" type="fixed" >
      <parent link="${name}_optical" />
      <child link="${name}" />
      <origin xyz="0 0 0" rpy="-1.57079632679 0 -1.57079632679" />
    </joint>

    <joint name="${name}_joint" type="fixed" >
      <parent link="${parent_link}" />
      <child link="${name}_optical" />
      <origin xyz="${x} ${y} ${z}" rpy="${roll} ${pitch} ${yaw}" />
    </joint>

    <gazebo reference="${name}_optical" >
      <material>Gazebo/White</material>
      <sensor name="camera" type="wideanglecamera">	  
        <camera>
        <horizontal_fov>3.1416</horizontal_fov>
        <image>
          <width>1280</width>
          <height>720</height>
        </image>
        <clip>
          <near>0.1</near>
          <far>100</far>
        </clip>
        <!-- A new section named `lens`. -->
        <lens>
          <!-- type element is mandatory -->
          <type>custom</type>
          <!-- manually defined mapping function r = c1*f*fun(theta/c2 + c3) -->
          <!-- More information here: https://en.wikipedia.org/wiki/Fisheye_lens#Mapping_function -->
          <custom_function>
            <c1>2</c1>   <!-- linear scaling -->
            <c2>2</c2>      <!-- angle scaling -->
            <f>1</f>      <!-- one more scaling parameter -->
            <fun>id</fun>  <!-- one of sin,tan,id -->
          </custom_function>
          <!-- if it is set to `true` your horizontal FOV will ramain as defined -->
          <!-- othervise it depends on lens type and custom function, if there is one -->
          <scale_to_hfov>true</scale_to_hfov>
          <!-- clip everything that is outside of this angle -->
          <cutoff_angle>1.508</cutoff_angle>
          <!-- resolution of the cubemap texture, the highter it is - the sharper is your image -->
          <env_texture_size>1280</env_texture_size>
        </lens>
        </camera>
        <always_on>1</always_on>
        <update_rate>2</update_rate>
        <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
          <robotNamespace>/sensor</robotNamespace>
          <cameraName>${name}</cameraName>
          <imageTopicName>image_raw</imageTopicName>
          <cameraInfoTopicName>camera_info</cameraInfoTopicName>
          <frameName>${name}</frameName>
          <hackBaseline>0.07</hackBaseline>
        </plugin>
      </sensor>
    </gazebo>
  </xacro:macro>
  
</robot>
